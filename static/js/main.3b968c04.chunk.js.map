{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["emailRegex","RegExp","App","props","handleSubmit","e","formErrors","preventDefault","state","Object","values","forEach","val","length","console","log","firstname","lastname","email","password","handleChange","target","name","value","test","setState","this","className","onSubmit","noValidate","htmlFor","placeholder","onChange","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3b968c04.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst emailRegex = RegExp(/^[a-zA-Z0-9.!#$%&'*+/=?_`{||}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z-0-9-]+)*$/)\n\nconst formValid = formErrors => {\n  let valid = true\n\n  Object.values(formErrors).forEach(val => {\n    val.length > 0 && (valid = false);\n  })\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      firstname : null,\n      lastname  : null,\n      email     : null,\n      password  : null,\n      formErrors  : {\n          firstname : \"\",\n          lastname  : \"\",\n          email     : \"\",\n          password  : \"\",\n      }       \n    }\n  }\n  \n  handleSubmit = (e) => {\n    e.preventDefault()\n\n    if (!formValid(this.state.formErrors)) {\n      console.log(`\n        --SUBMITTING--\n        FirstName : ${this.state.firstname}\n        LastName  : ${this.state.lastname}\n        Email     : ${this.state.email}\n        Password  : ${this.state.password}\n      `)\n    }\n  }\n  handleChange = (e) => {\n    e.preventDefault()\n    const { name, value } = e.target\n    let formErrors = {...this.state.formErrors};\n    formErrors[name] = value\n    switch (name) {\n      case \"firstname\":\n        formErrors.firstname = value.length < 3 && value.length > 0 \n        ? \"minimum 3 characters required\" \n        : \"\"\n      break;\n      case \"lastname\":\n        formErrors.lastname = value.length < 3 && value.length > 0 \n        ? \"minimum 3 characters required\" \n        : \"\"\n      break;\n      case 'email':\n        formErrors.email = emailRegex.test(value) < 6 && value.length > 0 \n        ? \"\" \n        : \"invalid email address\"\n      break;\n      case 'password':\n        formErrors.password = value.length < 6 && value.length > 0 \n        ? \"minimum 6 characters required\" \n        : \"\"\n      break;\n        default:\n          break;\n    }\n    this.setState({\n      formErrors,[name] : value\n    }, () => console.log(this.state.firstname))\n  }\n  render(){\n    const {formErrors} = this.state\n    return (\n      <div className=\"wrapper\">\n        <div className=\"form-wrapper\">\n        <h1>create account</h1>\n        <form onSubmit={this.handleSubmit} noValidate>\n          <div className=\"firstname\">\n            <label htmlFor=\"firstname\">First Name</label>\n            <input \n              name=\"firstname\"\n              className=\"\" \n              placeholder=\"firstname\"  \n              noValidate\n              onChange={this.handleChange} \n            />\n            {formErrors.firstname.length > 0 && (\n              <span className=\"errorMessage\">{formErrors.firstname}</span>\n            )}\n          </div>\n          <div className=\"lastname\">\n            <label htmlFor=\"lastname\">Last Name</label>\n            <input \n              className=\"\" \n              name=\"lastname\"\n              placeholder=\"lastname\"  \n              noValidate \n              onChange={this.handleChange} \n            />\n            {formErrors.lastname.length > 0 && (\n              <span className=\"errorMessage\">{formErrors.lastname}</span>\n            )}\n          </div>\n          <div className=\"email\">\n            <label htmlFor=\"email\">Email</label>\n            <input \n              name=\"email\"\n              className=\"\" \n              placeholder=\"email\"  \n              noValidate \n              onChange={this.handleChange} \n            />\n            {formErrors.email.length > 0 && (\n              <span className=\"errorMessage\">{formErrors.email}</span>\n            )}\n          </div>\n          <div className=\"password\">\n            <label htmlFor=\"password\">Password</label>\n            <input \n              name=\"password\"\n              className=\"\" \n              placeholder=\"password\"  \n              type=\"password\" \n              noValidate \n              onChange={this.handleChange} \n            />\n            {formErrors.password.length > 0 && (\n              <span className=\"errorMessage\">{formErrors.password}</span>\n            )}\n          </div>\n          <div className=\"createAccount\">\n            <button type=\"submit\">\n              Create Account\n            </button>\n            <small>Already Have an Account ?</small>\n          </div>\n        </form>\n      </div>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}